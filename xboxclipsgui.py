#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.14
# In conjunction with Tcl version 8.6
#    Jul 28, 2018 11:33:42 AM
from __future__ import with_statement
import sys
#import xbox
#from xbox import *
from tkFileDialog import *
from PIL import ImageTk, Image
import requests
import os

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import xboxclipsgui_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    top = xbox_clips_com (root)
    xboxclipsgui_support.init(root, top)
    root.mainloop()

w = None
def create_xbox_clips_com(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    top = xbox_clips_com (w)
    xboxclipsgui_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_xbox_clips_com():
    global w
    w.destroy()
    w = None


class xbox_clips_com:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        font10 = "-family {Courier New} -size 10 -weight normal -slant"  \
            " roman -underline 0 -overstrike 0"
        font11 = "-family {Segoe UI} -size 9 -weight bold -slant roman"  \
            " -underline 0 -overstrike 0"
        font9 = "-family {Segoe UI} -size 9 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("364x276+425+141")
        top.title("xbox-clips.com")
        top.iconbitmap('img/bug_TK_icon.ico')
        top.configure(background="beige")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")



        self.Label1 = Label(top)
        self.Label1.place(relx=0.03, rely=0.04, height=21, width=95)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(anchor=W)
        self.Label1.configure(background="beige")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font=font11)
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Microsoft Email:''')

        self.Entry1 = Entry(top)
        self.Entry1.place(relx=0.3, rely=0.04,height=20, relwidth=0.31)
        self.Entry1.configure(background="white")
        self.Entry1.configure(disabledforeground="#a3a3a3")
        self.Entry1.configure(font=font10)
        self.Entry1.configure(foreground="#000000")
        self.Entry1.configure(highlightbackground="#d9d9d9")
        self.Entry1.configure(highlightcolor="black")
        self.Entry1.configure(insertbackground="black")
        self.Entry1.configure(selectbackground="#c4c4c4")
        self.Entry1.configure(selectforeground="black")
        self.Entry1.configure(width=114)

        self.Label2 = Label(top)
        self.Label2.place(relx=0.03, rely=0.14, height=21, width=59)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(anchor=W)
        self.Label2.configure(background="beige")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(font=font11)
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''Password:''')

        self.Entry2 = Entry(top)
        self.Entry2.place(relx=0.3, rely=0.14,height=20, relwidth=0.31)
        self.Entry2.configure(background="white")
        self.Entry2.configure(disabledforeground="#a3a3a3")
        self.Entry2.configure(font=font10)
        self.Entry2.configure(foreground="#000000")
        self.Entry2.configure(highlightbackground="#d9d9d9")
        self.Entry2.configure(highlightcolor="black")
        self.Entry2.configure(insertbackground="black")
        self.Entry2.configure(selectbackground="#c4c4c4")
        self.Entry2.configure(selectforeground="black")
        self.Entry2.configure(width=114)

        self.Frame1 = Frame(top)
        self.Frame1.place(relx=0.03, rely=0.36, relheight=0.6, relwidth=0.95)
        self.Frame1.configure(relief=GROOVE)
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief=GROOVE)
        self.Frame1.configure(background="#177B3D")
        self.Frame1.configure(highlightbackground="#11680e")
        self.Frame1.configure(highlightcolor="black")
        self.Frame1.configure(width=345)

        self.Label3 = Label(self.Frame1)
        self.Label3.place(relx=0.03, rely=0.17, height=21, width=83)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(anchor=W)
        self.Label3.configure(background="#177B3D")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(font=font11)
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(justify=LEFT)
        self.Label3.configure(text='''Output Folder:''')
        self.Label3.configure(width=83)

        self.Scrolledtext1 = ScrolledText(self.Frame1)
        self.Scrolledtext1.place(relx=0.06, rely=0.34, relheight=0.46
                , relwidth=0.9)
        self.Scrolledtext1.configure(background="white")
        self.Scrolledtext1.configure(font=font9)
        self.Scrolledtext1.configure(foreground="black")
        self.Scrolledtext1.configure(highlightbackground="#d9d9d9")
        self.Scrolledtext1.configure(highlightcolor="black")
        self.Scrolledtext1.configure(insertbackground="black")
        self.Scrolledtext1.configure(insertborderwidth="3")
        self.Scrolledtext1.configure(selectbackground="#c4c4c4")
        self.Scrolledtext1.configure(selectforeground="black")
        self.Scrolledtext1.configure(width=10)
        self.Scrolledtext1.configure(wrap=NONE)

        self.Button1 = Button(self.Frame1)
        self.Button1.place(relx=0.81, rely=0.17, height=24, width=37)
        self.Button1.configure(activebackground="#cccccc")
        self.Button1.configure(activeforeground="#177b3d")
        self.Button1.configure(background="beige")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(font=font11)
        self.Button1.configure(foreground="#177B3D")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Go''')
        self.Button1.configure(command=self.go)

        self.Button2 = Button(self.Frame1)
        self.Button2.place(relx=0.49, rely=0.17, height=24, width=57)
        self.Button2.configure(activebackground="#d9d9d9")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="beige")
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(font=font11)
        self.Button2.configure(foreground="#177B3D")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(pady="0")
        self.Button2.configure(text='''Browse''')
        self.Button2.configure(width=57)
        self.Button2.configure(command=self.outdir)

        self.Text1 = Text(self.Frame1)
        self.Text1.place(relx=0.29, rely=0.17, relheight=0.13, relwidth=0.19)
        self.Text1.configure(background="white")
        self.Text1.configure(font=font9)
        self.Text1.configure(foreground="black")
        self.Text1.configure(highlightbackground="#d9d9d9")
        self.Text1.configure(highlightcolor="black")
        self.Text1.configure(insertbackground="black")
        self.Text1.configure(selectbackground="#c4c4c4")
        self.Text1.configure(selectforeground="black")
        self.Text1.configure(width=64)
        self.Text1.configure(wrap=NONE)

        self.Label4 = Label(top)
        self.Label4.place(relx=0.69, rely=0.04, height=71, width=104)
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(activeforeground="black")
        self.Label4.configure(background="beige")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(highlightbackground="#d9d9d9")
        self.Label4.configure(highlightcolor="black")
        self._img1 = ImageTk.PhotoImage(file="img/bug_1_104x71.png")
        self.Label4.configure(image=self._img1)


        self.Label5 = Label(top)
        self.Label5.place(relx=0.03, rely=0.25, height=21, width=64)
        self.Label5.configure(anchor=W)
        self.Label5.configure(background="beige")
        self.Label5.configure(disabledforeground="#a3a3a3")
        self.Label5.configure(font=font11)
        self.Label5.configure(foreground="#000000")
        self.Label5.configure(justify=LEFT)
        self.Label5.configure(text='''Gamertag:''')
        self.Label5.configure(width=64)

        self.Entry3 = Entry(top)
        self.Entry3.place(relx=0.3, rely=0.25,height=20, relwidth=0.31)
        self.Entry3.configure(background="white")
        self.Entry3.configure(disabledforeground="#a3a3a3")
        self.Entry3.configure(font=font10)
        self.Entry3.configure(foreground="#000000")
        self.Entry3.configure(insertbackground="black")
        self.Entry3.configure(width=114)


    def go(self):
        outdir = self.Text1.get("1.0", "end-1c")
        self.Scrolledtext1.insert('end',outdir+'\n')
        gt = self.Entry3.get()
        pwd = self.Entry2.get()
        email = self.Entry1.get()
        vari = 1
        os.chdir(outdir)

        try:
            xbox.client.authenticate(login = email, password = pwd)
            self.Scrolledtext1.insert('end',"Login Sucess"+'\n')
            root.update_idletasks()
            root.update()
        except Exception as e:
            self.Scrolledtext1.insert('end', "Error: " + str(e)+'\n')
            root.update_idletasks()
            root.update()


        try:
            Gamertag = xbox.GamerProfile.from_gamertag(gt)
            clips = Gamertag.clips()
            clips = list(clips)
            for clip in clips:
                r = requests.get(clip.media_url, stream=True)
                with open("Clip"+ str(vari)+".mp4","w+") as f:
                    f.write(r.content)
                self.Scrolledtext1.insert('end', "Clip "+ str(vari) + " downloaded."'\n')
                self.Scrolledtext1.see("end")
                root.update_idletasks()
                root.update()
                vari = vari+1
            self.Scrolledtext1.insert('end', "Done."+'\n')
            root.update_idletasks()
            root.update()
        except Exception as e:
            self.Scrolledtext1.insert('end', "Error: " + str(e)+'\n')
            root.update_idletasks()
            root.update()
            
        
            
            
            
        



    def outdir(self):
        self.Text1.delete(1.0,END)
        out = askdirectory()
        self.Text1.insert('end',out)
        root.update_idletasks()
        root.update()
        
        
        





# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = Pack.__dict__.keys() | Grid.__dict__.keys() \
                  | Place.__dict__.keys()
        else:
            methods = Pack.__dict__.keys() + Grid.__dict__.keys() \
                  + Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

if __name__ == '__main__':
    vp_start_gui()



